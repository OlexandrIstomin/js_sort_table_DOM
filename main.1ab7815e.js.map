{"version":3,"sources":["scripts/main.js"],"names":["table","document","querySelector","addEventListener","e","arrayRows","tBodies","rows","th","target","closest","sort","sorting","a","b","firstElement","cells","cellIndex","textContent","secondtElement","localeCompare","newfirseElement","slice","newSecondElement","parseFloat","append"],"mappings":";AAAA,aAIA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAFA,IAAMA,EAAQC,SAASC,cAAc,SAErCF,EAAMG,iBAAiB,QAAS,SAAAC,GAAK,IAAA,EAC7BC,EAAgBL,EAAAA,EAAMM,QAAQ,GAAGC,MACjCC,EAAKJ,EAAEK,OAAOC,QAAQ,MAExB,IAACF,EACI,OAAA,EAuBTH,EAAUM,KApBDC,SAAQC,EAAGC,GACZC,IAAAA,EAAeF,EAAEG,MAAMR,EAAGS,WAAWC,YACrCC,EAAiBL,EAAEE,MAAMR,EAAGS,WAAWC,YAErCV,OAAAA,EAAGS,WACJ,KAAA,EACA,KAAA,EACIF,OAAAA,EAAaK,cAAcD,GAE/B,KAAA,EACI,OAACJ,GAAgBI,EAErB,KAAA,EACGE,IAAAA,EAAkBN,EAAaO,MAAM,GACrCC,EAAmBJ,EAAeG,MAAM,GAEvCE,OAAAA,WAAWH,GAAmBG,WAAWD,OAKtDvB,EAAAA,EAAMM,QAAQ,IAAGmB,OAAUpB,MAAAA,EAAAA,EAAAA","file":"main.1ab7815e.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst table = document.querySelector('table');\n\ntable.addEventListener('click', e => {\n  const arrayRows = [...table.tBodies[0].rows];\n  const th = e.target.closest('th');\n\n  if (!th) {\n    return false;\n  }\n\n  function sorting(a, b) {\n    const firstElement = a.cells[th.cellIndex].textContent;\n    const secondtElement = b.cells[th.cellIndex].textContent;\n\n    switch (th.cellIndex) {\n      case 0:\n      case 1:\n        return firstElement.localeCompare(secondtElement);\n\n      case 2:\n        return +firstElement - +secondtElement;\n\n      case 3:\n        const newfirseElement = firstElement.slice(1);\n        const newSecondElement = secondtElement.slice(1);\n\n        return parseFloat(newfirseElement) - parseFloat(newSecondElement);\n    }\n  }\n\n  arrayRows.sort(sorting);\n  table.tBodies[0].append(...arrayRows);\n});\n"]}